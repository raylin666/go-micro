// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mt/internal/repositories/dbrepo/model"
)

func newArticleCategoryRelation(db *gorm.DB, opts ...gen.DOOption) articleCategoryRelation {
	_articleCategoryRelation := articleCategoryRelation{}

	_articleCategoryRelation.articleCategoryRelationDo.UseDB(db, opts...)
	_articleCategoryRelation.articleCategoryRelationDo.UseModel(&model.ArticleCategoryRelation{})

	tableName := _articleCategoryRelation.articleCategoryRelationDo.TableName()
	_articleCategoryRelation.ALL = field.NewAsterisk(tableName)
	_articleCategoryRelation.ID = field.NewInt(tableName, "id")
	_articleCategoryRelation.ArticleId = field.NewInt(tableName, "article_id")
	_articleCategoryRelation.CategoryId = field.NewInt(tableName, "category_id")

	_articleCategoryRelation.fillFieldMap()

	return _articleCategoryRelation
}

type articleCategoryRelation struct {
	articleCategoryRelationDo articleCategoryRelationDo

	ALL        field.Asterisk
	ID         field.Int
	ArticleId  field.Int
	CategoryId field.Int

	fieldMap map[string]field.Expr
}

func (a articleCategoryRelation) Table(newTableName string) *articleCategoryRelation {
	a.articleCategoryRelationDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a articleCategoryRelation) As(alias string) *articleCategoryRelation {
	a.articleCategoryRelationDo.DO = *(a.articleCategoryRelationDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *articleCategoryRelation) updateTableName(table string) *articleCategoryRelation {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt(table, "id")
	a.ArticleId = field.NewInt(table, "article_id")
	a.CategoryId = field.NewInt(table, "category_id")

	a.fillFieldMap()

	return a
}

func (a *articleCategoryRelation) WithContext(ctx context.Context) *articleCategoryRelationDo {
	return a.articleCategoryRelationDo.WithContext(ctx)
}

func (a articleCategoryRelation) TableName() string { return a.articleCategoryRelationDo.TableName() }

func (a articleCategoryRelation) Alias() string { return a.articleCategoryRelationDo.Alias() }

func (a *articleCategoryRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *articleCategoryRelation) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 3)
	a.fieldMap["id"] = a.ID
	a.fieldMap["article_id"] = a.ArticleId
	a.fieldMap["category_id"] = a.CategoryId
}

func (a articleCategoryRelation) clone(db *gorm.DB) articleCategoryRelation {
	a.articleCategoryRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a articleCategoryRelation) replaceDB(db *gorm.DB) articleCategoryRelation {
	a.articleCategoryRelationDo.ReplaceDB(db)
	return a
}

type articleCategoryRelationDo struct{ gen.DO }

//where("`article_id`=@article_id and `category_id`=@category_id")
func (a articleCategoryRelationDo) FirstArticleAndCategory(article_id string, category_id string) (result model.ArticleCategoryRelation, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, article_id)
	params = append(params, category_id)
	generateSQL.WriteString("`article_id`=? and `category_id`=? ")

	var executeSQL *gorm.DB

	executeSQL = a.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result)
	err = executeSQL.Error
	return
}

func (a articleCategoryRelationDo) Debug() *articleCategoryRelationDo {
	return a.withDO(a.DO.Debug())
}

func (a articleCategoryRelationDo) WithContext(ctx context.Context) *articleCategoryRelationDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleCategoryRelationDo) ReadDB() *articleCategoryRelationDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleCategoryRelationDo) WriteDB() *articleCategoryRelationDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleCategoryRelationDo) Session(config *gorm.Session) *articleCategoryRelationDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleCategoryRelationDo) Clauses(conds ...clause.Expression) *articleCategoryRelationDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleCategoryRelationDo) Returning(value interface{}, columns ...string) *articleCategoryRelationDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleCategoryRelationDo) Not(conds ...gen.Condition) *articleCategoryRelationDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleCategoryRelationDo) Or(conds ...gen.Condition) *articleCategoryRelationDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleCategoryRelationDo) Select(conds ...field.Expr) *articleCategoryRelationDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleCategoryRelationDo) Where(conds ...gen.Condition) *articleCategoryRelationDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleCategoryRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *articleCategoryRelationDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a articleCategoryRelationDo) Order(conds ...field.Expr) *articleCategoryRelationDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleCategoryRelationDo) Distinct(cols ...field.Expr) *articleCategoryRelationDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleCategoryRelationDo) Omit(cols ...field.Expr) *articleCategoryRelationDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleCategoryRelationDo) Join(table schema.Tabler, on ...field.Expr) *articleCategoryRelationDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleCategoryRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *articleCategoryRelationDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleCategoryRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *articleCategoryRelationDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleCategoryRelationDo) Group(cols ...field.Expr) *articleCategoryRelationDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleCategoryRelationDo) Having(conds ...gen.Condition) *articleCategoryRelationDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleCategoryRelationDo) Limit(limit int) *articleCategoryRelationDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleCategoryRelationDo) Offset(offset int) *articleCategoryRelationDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleCategoryRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *articleCategoryRelationDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleCategoryRelationDo) Unscoped() *articleCategoryRelationDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleCategoryRelationDo) Create(values ...*model.ArticleCategoryRelation) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleCategoryRelationDo) CreateInBatches(values []*model.ArticleCategoryRelation, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleCategoryRelationDo) Save(values ...*model.ArticleCategoryRelation) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleCategoryRelationDo) First() (*model.ArticleCategoryRelation, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleCategoryRelation), nil
	}
}

func (a articleCategoryRelationDo) Take() (*model.ArticleCategoryRelation, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleCategoryRelation), nil
	}
}

func (a articleCategoryRelationDo) Last() (*model.ArticleCategoryRelation, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleCategoryRelation), nil
	}
}

func (a articleCategoryRelationDo) Find() ([]*model.ArticleCategoryRelation, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArticleCategoryRelation), err
}

func (a articleCategoryRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleCategoryRelation, err error) {
	buf := make([]*model.ArticleCategoryRelation, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleCategoryRelationDo) FindInBatches(result *[]*model.ArticleCategoryRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleCategoryRelationDo) Attrs(attrs ...field.AssignExpr) *articleCategoryRelationDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleCategoryRelationDo) Assign(attrs ...field.AssignExpr) *articleCategoryRelationDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleCategoryRelationDo) Joins(fields ...field.RelationField) *articleCategoryRelationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleCategoryRelationDo) Preload(fields ...field.RelationField) *articleCategoryRelationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleCategoryRelationDo) FirstOrInit() (*model.ArticleCategoryRelation, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleCategoryRelation), nil
	}
}

func (a articleCategoryRelationDo) FirstOrCreate() (*model.ArticleCategoryRelation, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleCategoryRelation), nil
	}
}

func (a articleCategoryRelationDo) FindByPage(offset int, limit int) (result []*model.ArticleCategoryRelation, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleCategoryRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleCategoryRelationDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleCategoryRelationDo) Delete(models ...*model.ArticleCategoryRelation) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleCategoryRelationDo) withDO(do gen.Dao) *articleCategoryRelationDo {
	a.DO = *do.(*gen.DO)
	return a
}
